@page "/AdministrativeDivision/Form"
@page "/AdministrativeDivision/Form/{Id:int?}"

@* <h3>AdministrativeDivisionForm</h3> *@
@using CoreBusiness
@using HajjManagement.Shared.Services
@inject IGenericAPIService<AdministrativeDivision> AdministrativeDivisionService
@inject IGenericAPIService<Country> CountryService
@inject IGenericAPIService<CountryStructure> CountryStructureServie
@inject NavigationManager NavigationManager

<div class="card shadow" dir="rtl">
    <div class="card-header">
        <h3>@title</h3>
    </div>
    <div class="card-body">
        <EditForm Model="administrativeDivision" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <!--
                                  @* ValueExpression="@(() =>user.AdministrativeDivisionId)" *@
                            <CountryStructurePage Id="@((int)(Id??0))"
                                  IsEditMode="@((Id??0) > 0)"
                                  @bind-Value="administrativeDivision.AdministrativeDivisionId"
                                  OnCountryChanged="()=>{}"
                                  OnMainDivisionChanged="()=>{}" />
            -->
            <div class="row mt-3 mx-2">

                <div class="col">
                    <div class="mb-3">
                        <label for="CountryId" class="form-label">البلد</label>
                        @if (Id.HasValue && Id > 0)
                        {
                            <input type="text" class="form-control" value="@(countries.FirstOrDefault(c => c.CountryId == administrativeDivision.CountryId)?.Name)" disabled />
                        }
                        else
                        {
                            @if (countries != null && countries.Any())
                            {

                                <select id="country-select" class="form-control" @onchange="OnCountryChange"
                                        disabled="@(Id.HasValue && Id.Value > 0)">
                                    <option value="">Select a country...</option>
                                    @foreach (var country in countries)
                                    {
                                        <option selected="@(country.CountryId == GlobalData.CurrentCountryId)" value="@country.CountryId">@country.Name</option>
                                    }
                                </select>
                            }
                        }

                    </div>
                </div>

                <div class="col">
                    <div class="mb-3">
                        <label for="Level" class="form-label">مسمى الهيكل الإداري</label>
                        @if (countryStructureList != null && countryStructureList.Any())
                        {
                            @* <option value="">اختر هيكل إداري...</option> *@

                            <select id="countrystructure-select" @onchange="OnCountryStructureChange" class="form-control">

                                @foreach (var cs in countryStructureList)
                                {
                                    <option value="@cs.CountryStructureId">@cs.Name</option>
                                }
                            </select>
                        }
                    </div>
                </div>

                <div class="col">
                    <div class="mb-3">
                        <label for="Level" class="form-label">المستوى الإداري الأعلى</label>
                        @if (AdministrativeDivisionList != null && AdministrativeDivisionList.Any())
                        {
                            @* <option value="">اختر هيكل إداري...</option> *@

                            <select id="division-select" @onchange="OnDivisionChange" class="form-control">

                                @foreach (var admDiv in AdministrativeDivisionList)
                                {
                                    <option selected="@((parentAdministrativeDivision != null && parentAdministrativeDivision.AdministrativeDivisionId == admDiv.AdministrativeDivisionId) ? true : false)" value="@admDiv.AdministrativeDivisionId">@admDiv.Name</option>
                                }
                            </select>
                        }
                    </div>
                </div>


            </div>

            <div class="mt-3 mx-2">
                <div class="mb-3">
                    <label for="NameAr" class="form-label">الاسم</label>
                    <InputText id="NameAr" class="form-control" @bind-Value="administrativeDivision.Name" />
                </div>
            </div>


            <button type="submit"
                    disabled="@(administrativeDivision.CountryStructureId == 0 || administrativeDivision.CountryId == 0 || string.IsNullOrWhiteSpace(administrativeDivision.Name))"
                    class="btn btn-primary">
                <i class="bi bi-floppy2-fill m-1"></i> @(Id.HasValue && Id.Value > 0 ? "تعديل" : "حفظ")
            </button>
            <button type="button" class="btn btn-dark" @onclick="onCancel"><i class="bi bi-stop-circle-fill"></i> إلغاء</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private string title = "إضافة الهيكل الإداري";
    private AdministrativeDivision? administrativeDivision = new(); // Field to hold the current AdministrativeDivisionType
    private AdministrativeDivision? parentAdministrativeDivision = new();
    private List<Country> countries = new();
    private List<CountryStructure> allCountryStructureList = new();
    private List<CountryStructure> countryStructureList = new();
    private List<AdministrativeDivision> AllAdministrativeDivisionList = new();
    private List<AdministrativeDivision> AdministrativeDivisionList = new();
    [Inject] IJSRuntime JS { get; set; }


    override protected async Task OnInitializedAsync()
    {
        countries = (await CountryService.GetAllAsync()).ToList();
        allCountryStructureList = (await CountryStructureServie.GetAllAsync()).ToList();

        AllAdministrativeDivisionList = (await AdministrativeDivisionService.GetAllAsync()).ToList(); // Fetching administrative divisions
        AllAdministrativeDivisionList.Insert(0, new AdministrativeDivision { AdministrativeDivisionId = 0, Name = "لا يوجد" });
        AdministrativeDivisionList = AllAdministrativeDivisionList.Where(ad => ad.CountryId == GlobalData.CurrentCountryId || ad.AdministrativeDivisionId == 0).ToList();
        administrativeDivision.CountryId = GlobalData.CurrentCountryId;
        if (Id.HasValue && Id.Value > 0)
        {
            title = "تعديل الهيكل الإداري";
            // administrativeDivision = await AdministrativeDivisionService.GetByIdAsync(Id.Value);
            administrativeDivision = AllAdministrativeDivisionList.First(ad => ad.AdministrativeDivisionId == Id);
            AdministrativeDivisionList = AllAdministrativeDivisionList.Where(ad => ad.CountryId == administrativeDivision.CountryId || ad.AdministrativeDivisionId == 0).ToList();
            // administrativeDivisionType.include(c => c.Country);
        }
        countryStructureList = allCountryStructureList.Where(cs => cs.CountryId == GlobalData.CurrentCountryId).ToList();
        administrativeDivision.CountryStructureId = countryStructureList.FirstOrDefault()?.CountryStructureId ?? 0;
        parentAdministrativeDivision = AdministrativeDivisionList.FirstOrDefault(ad => ad.AdministrativeDivisionId == administrativeDivision.ParentId);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeTomSelect", "#country-select");
            await JS.InvokeVoidAsync("initializeTomSelect", "#division-select");

        }
    }
    private async Task HandleValidSubmit()
    {

        var country = countries.FirstOrDefault(c => c.CountryId == GlobalData.CurrentCountryId);

        // var parentDivision = AdministrativeDivisionList.FirstOrDefault(pd => pd.AdministrativeDivisionId == administrativeDivision.ParentId);

        if (administrativeDivision!.AdministrativeDivisionId == 0)
        {
            administrativeDivision.CreatedAt = DateTime.UtcNow;
            administrativeDivision.UpdatedAt = DateTime.UtcNow;
            if (administrativeDivision.ParentId != null || administrativeDivision.ParentId > 0)
            {
                var parentDivision = AdministrativeDivisionList.First(pd => pd.AdministrativeDivisionId == administrativeDivision.ParentId);
                administrativeDivision.CountryId = countries.First(c => c.CountryId == parentDivision.CountryId).CountryId;
            }
            await AdministrativeDivisionService.AddAsync(administrativeDivision);
        }
        else
        {
            //administrativeDivision.ParentId = administrativeDivision.ParentId; // Ensure ParentId is set correctly
            administrativeDivision.UpdatedAt = DateTime.UtcNow;
            await AdministrativeDivisionService.UpdateAsync(administrativeDivision);
        }

        NavigationManager.NavigateTo("/AdministrativeDivision/List");
    }
    private void onCancel()
    {
        NavigationManager.NavigateTo("/AdministrativeDivision/List");
    }
    private void OnCountryChange(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value?.ToString(), out int selectedCountryId))
        {
            GlobalData.CurrentCountryId = selectedCountryId;
            administrativeDivision.CountryId = selectedCountryId;
            countryStructureList = allCountryStructureList.Where(cs => cs.CountryId == selectedCountryId).ToList();
            AdministrativeDivisionList = AllAdministrativeDivisionList.Where(ad => ad.CountryId == selectedCountryId || ad.AdministrativeDivisionId == 0).ToList();

        }
    }
    private void OnCountryStructureChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedCountryStructureId))
        {

            administrativeDivision.CountryStructureId = selectedCountryStructureId;
            var selectedCountryStructure = countryStructureList.FirstOrDefault(cs => cs.CountryStructureId == selectedCountryStructureId);
            AdministrativeDivisionList = AllAdministrativeDivisionList.Where(ad => ad.CountryStructureId == selectedCountryStructure.ParentCountryStructureId).ToList();
            administrativeDivision.ParentId = AdministrativeDivisionList?.FirstOrDefault()?.AdministrativeDivisionId ?? null;
        }
    }
    private void OnDivisionChange(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value?.ToString(), out int selectedDivisionId))
        {
            var selectedDivision = AdministrativeDivisionList.FirstOrDefault(ad => ad.AdministrativeDivisionId == selectedDivisionId);
            if (selectedDivision != null && selectedDivision.AdministrativeDivisionId > 0)
            {
                administrativeDivision.CountryId = selectedDivision.CountryId;
            }
            else
            {
                administrativeDivision.CountryId = 0; // Reset CountryId if "لا يوجد" is selected
            }

            administrativeDivision.ParentId = selectedDivision?.AdministrativeDivisionId ?? null;// parentAdministrativeDivision?.AdministrativeDivisionId?? null;

            // StateHasChanged();

        }
    }
}
