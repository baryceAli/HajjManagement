@page "/AdministrativeDivision/List"
@using HajjManagement.Shared.Pages.Common
@using HajjManagement.Shared.Services
@using CoreBusiness
@inject IGenericAPIService<AdministrativeDivision> AdministrativeDivisionService
@inject IGenericAPIService<Country> CountryService
@inject IGenericAPIService<CountryStructure> CountryStructureService
@inject NavigationManager NavigationManager

<div class="card shadow" dir="rtl">
    <div class="card-header">
        <h3 class="mb-4">الهيكل الإداري</h3>
    </div>
    <div class="card-body">
        <button class="btn btn-primary mb-3" @onclick="CreateNew"><i class="bi bi-file-earmark-plus-fill"></i> إضافة جديد</button>
        @if (countries != null && countries.Any())
        {

            <select id="country-select" @onchange="onCountryChanged" class="form-control mt-3">
                <option value="">Select a country...</option>
                @foreach (var country in countries)
                {
                    <option value="@country.CountryId">@country.Name</option>
                }
            </select>
        }
        @if (administrativeDivision == null)
        {
            <p>جاري التحميل...</p>
        }
        
        else
        {
            
                <PagedTable TItem="AdministrativeDivision"
                            Items="administrativeDivision"
                            Language="@language"
                            Columns="@AdministrativeDivisionColumns"
                            OnView="ViewAdministrativeDivision"
                            OnEdit="EditAdministrativeDivision" />
            

        }

    </div>
</div>


@code {
    // Add property to hold the list of AdministrativeDivisionTypes
    private List<AdministrativeDivision> administrativeDivision = new();
    private List<AdministrativeDivision> allAdministrativeDivision = new();
    private List<Country> countries = new();
    private List<CountryStructure> allCountryStructures = new();
    private List<CountryStructure> countryStructures = new();
    private Country selectedCountry = new();
    private int selectedCountryId = 0;
    [Inject] IJSRuntime JS { get; set; }
    private string language = "Ar";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            countries = (await CountryService.GetAllAsync()).ToList();
            selectedCountry = countries.FirstOrDefault() ?? new();
            selectedCountryId = selectedCountry.CountryId;
            
            allAdministrativeDivision = (await AdministrativeDivisionService.GetAllAsync()).ToList();
            administrativeDivision = allAdministrativeDivision
                .Where(ad => ad.CountryId == selectedCountryId)
                .ToList();
            
            allCountryStructures = (await CountryStructureService.GetAllAsync()).ToList();
            countryStructures = allCountryStructures.Where(cs => cs.CountryId == selectedCountryId).ToList();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching data: {ex.Message}");
            administrativeDivision = new List<AdministrativeDivision>();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeTomSelect", "#country-select");


        }
    }

    private void CreateNew()
    {
        NavigationManager.NavigateTo("/AdministrativeDivision/Form");
    }

    private void ViewDetails(int id)
    {
        NavigationManager.NavigateTo($"/AdministrativeDivision/Details/{id}");
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/AdministrativeDivision/Form/{id}");
    }

    private async Task onCountryChanged(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value?.ToString(), out int countryId))
        {

            selectedCountryId = countryId;
            
            administrativeDivision = allAdministrativeDivision
                .Where(ad => ad.CountryId == selectedCountryId)
                .ToList();
            countryStructures = allCountryStructures.Where(cs => cs.CountryId == selectedCountryId).ToList();
            // await JS.InvokeVoidAsync("console.log", $"Selected Country ID: {selectedCountryId}");
            StateHasChanged();
        }
    }

    /// <summary>
    /// PageTable Parameters for Guests
    /// </summary>
    /// <returns></returns>
    ///
    bool IsArabic => language == "Ar";

    private List<PagedTable<AdministrativeDivision>.ColumnDefinition<AdministrativeDivision>> AdministrativeDivisionColumns => GetAdministrativeDivisionColumns();
    private List<PagedTable<AdministrativeDivision>.ColumnDefinition<AdministrativeDivision>> GetAdministrativeDivisionColumns()
    {
        return new()
        {
            new() { Title = IsArabic ? "#" : "#", Property = "Id", GetValue = ad => ad.AdministrativeDivisionId},
            new() { Title = IsArabic ? "الاسم" : "Name", Property = "Name", GetValue = ad => ad.Name },
            new() { Title = IsArabic ? "اسم الهيكل الاداري" : "Country Structure Name", Property = "CountryStructureId", GetValue = ad => 
                                                                                       allCountryStructures.First(cs=>cs.CountryStructureId== ad.CountryStructureId).Name},
            new() { Title = IsArabic ? "الهيكل الاداري الأعلى" : "Upper Structure", Property = "ParentId ", GetValue = ad =>
                                                                        allAdministrativeDivision.FirstOrDefault(a=>a.AdministrativeDivisionId== ad.ParentId )==null?
                                                                        "لا يوجد":
                                                                        allAdministrativeDivision.First(a=>a.AdministrativeDivisionId== ad.ParentId ).Name},
            // new() { Title = IsArabic ? "الحقيبة" : "Bag", Property = "BagId", GetValue = g => g.BagId },
            // New column for Phone Number
            // new() { Title = IsArabic ? "رقم الهاتف" : "Phone Number", Property = "PhoneNumber", GetValue = g => g.phone },
        };
    }
    // These methods must exist to handle OnView and OnEdit events
    private Task ViewAdministrativeDivision(AdministrativeDivision guest)
    {
        NavigationManager.NavigateTo($"/AdministrativeDivision/Details/{guest.AdministrativeDivisionId}");
        return Task.CompletedTask;
    }

    private Task EditAdministrativeDivision(AdministrativeDivision guest)
    {
        NavigationManager.NavigateTo($"/AdministrativeDivision/Form/{guest.AdministrativeDivisionId}");
        return Task.CompletedTask;
    }

    /// <summary>
    /// End of PageTable Parameters for Guests
    /// </summary>
    /// <returns></returns>

}
