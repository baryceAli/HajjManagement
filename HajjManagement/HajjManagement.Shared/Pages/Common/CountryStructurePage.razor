@using HajjManagement.Shared.Services.Custom
@using System.Linq.Expressions
@* @typeparam TModel *@

<div class="row mt-3 mx-2">
    <!-- Country -->
    <div class="col">
        <div class="mb-3">
            <label class="form-label">البلد</label>
            @if (countries?.Any() == true)
            {
                <select class="form-control" disabled="@isDisabled" @onchange="OnCountryChange">
                    <option value="">Select a country...</option>
                    @foreach (var country in countries)
                    {
                        <option value="@country.CountryId" selected="@(country.CountryId == SelectedCountryId)">
                            @country.Name
                        </option>
                    }
                </select>
            }
        </div>
    </div>

    <!-- Main Administrative Division -->
    <div class="col">
        <div class="mb-3">
            @if (mainAdministrativeDivisions?.Any() == true)
            {
                var label = countryStructures.First(cs => cs.CountryStructureId == mainAdministrativeDivisions.First().CountryStructureId).Name;
                <label class="form-label">@label</label>
                <select class="form-control" @onchange="OnMainAdmDivChange">
                    <option value="">Select a @label...</option>
                    @foreach (var mad in mainAdministrativeDivisions)
                    {
                        <option value="@mad.AdministrativeDivisionId" selected="@(mad.AdministrativeDivisionId == SelectedMainDivisionId)">
                            @mad.Name
                        </option>
                    }
                </select>
            }
        </div>
    </div>

    @if (childrenCountryStructures != null && childrenCountryStructures.Any())
    {
        int index = 0;
        foreach (var cs in childrenCountryStructures)
        {
            <div class="col">
                <div class="mb-3">
                    <label for="divisionId" class="form-label">@cs.Name</label>

                    @{
                        var admDiv1 = childrenAdministrativeDivisions.Where(ad => ad.CountryStructureId == cs.CountryStructureId).ToList();

                        if (admDiv1 != null && admDiv1.Any() && index==countryStructureCount)
                        {

                            <InputSelect id="country-select" class="form-control" @bind-Value="Value" @onchange="onChildAdmDivChange">
                                
                            @foreach (var ad in admDiv1)
                                {
                                    <option value="@ad.AdministrativeDivisionId">@ad.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="ValueExpression" />
                        }
                        else if (admDiv1 != null && admDiv1.Any())
                        {
                            <select id="country-select" class="form-control">
                                
                            @foreach (var ad in admDiv1)
                                {
                                    <option value="@ad.AdministrativeDivisionId">@ad.Name</option>
                                }
                            </select>
                        }
                    }
                </div>
            </div>

            index += 1;
        }

    }

</div>

@code {
    [Parameter] public int Id { get; set; }
    // [Parameter] public TModel Model { get; set; } = default!;
    [Parameter] public Expression<Func<int>> ValueExpression { get; set; } = default!;
    [Parameter] public int Value { get; set; }
    [Parameter] public EventCallback<int> ValueChanged { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = false;
    [Parameter] public int SelectedCountryId { get; set; }
    [Parameter] public bool isDisabled { get; set; }
    // 🔥 Callbacks for parent
    [Parameter] public EventCallback<int> OnCountryChanged { get; set; }
    [Parameter] public EventCallback<int> OnMainDivisionChanged { get; set; }
    [Parameter] public EventCallback<int> OnChildDivisionChanged { get; set; }

    [Inject] public IGenericAPIService<Country> CountryService { get; set; } = default!;
    [Inject] public IGenericAPIService<CountryStructure> CountryStructureService { get; set; } = default!;
    [Inject] public IGenericAPIService<AdministrativeDivision> AdministrativeDivisionService { get; set; } = default!;
    [Inject] public IAdministrativeDivisionCustomService AdministrativeDivisionCustomService { get; set; } = default!;
    [Inject] public ICountryStructureCustomService CountryStructureCustomService { get; set; } = default!;
    private IEnumerable<Country> countries = [];

    private IEnumerable<CountryStructure> countryStructures = [];
    private IEnumerable<CountryStructure> childrenCountryStructures = [];
    private int countryStructureCount = 0;
    private IEnumerable<AdministrativeDivision> administrativeDivisions = [];
    private IEnumerable<AdministrativeDivision> mainAdministrativeDivisions = [];
    private IEnumerable<AdministrativeDivision> childrenAdministrativeDivisions = [];

    // private int SelectedCountryId;
    private int SelectedMainDivisionId;
    private int SelectedChildDivisionId;

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryService.GetAllAsync();
        countryStructures = await CountryStructureService.GetAllAsync();
        administrativeDivisions = await AdministrativeDivisionService.GetAllAsync();
        // var adm = administrativeDivisions.FirstOrDefault(ad => ad.CountryId == SelectedCountryId);
        // Value = Value == 0 ? adm?.AdministrativeDivisionId??0 : Value;
        await InitializeSelectionsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Detect when parent updates the model or AdministrativeDivisionId changes
        await InitializeSelectionsAsync();
    }

    private async Task InitializeSelectionsAsync()
    {
        // Ensure required data is loaded
        if (SelectedCountryId <= 0 || !administrativeDivisions.Any())
            return;

        // Try to determine the selected administrative division
        var selectedAd = Value > 0
            ? administrativeDivisions.FirstOrDefault(a => a.AdministrativeDivisionId == Value)
            : administrativeDivisions.FirstOrDefault(a => a.CountryId == SelectedCountryId);

        if (selectedAd == null)
            return;

        // Set current country
        SelectedCountryId = selectedAd.CountryId;

        // Determine the top-level (main) division
        SelectedMainDivisionId = GetMainParentId(selectedAd);

        // Load all main administrative divisions for the country
        mainAdministrativeDivisions = administrativeDivisions
            .Where(ad => ad.CountryId == SelectedCountryId && (ad.ParentId is null or 0))
            .ToList();

        // Load children for the selected main division
        childrenAdministrativeDivisions = await AdministrativeDivisionCustomService
            .GetChildrenAsync(SelectedMainDivisionId, administrativeDivisions.ToList());

        // Load country structure hierarchy for this country
        var countryStructure = countryStructures.FirstOrDefault(cs => cs.CountryId == SelectedCountryId);
        if (countryStructure != null)
        {
            childrenCountryStructures = await CountryStructureCustomService
                .GetChildrenAsync(countryStructure.CountryStructureId, countryStructures.ToList());
        }

        // Count structures for this country
        countryStructureCount = countryStructures.Count(cs => cs.CountryId == SelectedCountryId);

        // Restore previously selected child division if applicable
        if (Value > 0 && selectedAd.AdministrativeDivisionId == Value)
        {
            SelectedChildDivisionId = selectedAd.AdministrativeDivisionId;
        }
    }

    private int GetMainParentId(AdministrativeDivision division)
    {
        var current = division;
        while (current.ParentId.HasValue && current.ParentId > 0)
        {
            current = administrativeDivisions.FirstOrDefault(a => a.AdministrativeDivisionId == current.ParentId) ?? current;
        }
        return current.AdministrativeDivisionId;
    }

    private async Task OnCountryChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var selectedCountryId))
        {
            SelectedCountryId = selectedCountryId;
            SelectedMainDivisionId = 0;

            mainAdministrativeDivisions = administrativeDivisions
                .Where(ad => ad.CountryId == selectedCountryId && (!ad.ParentId.HasValue || ad.ParentId == 0))
                .ToList();

            childrenAdministrativeDivisions = [];
            await ValueChanged.InvokeAsync(selectedCountryId);

            await OnCountryChanged.InvokeAsync(selectedCountryId);
        }
    }

    private async Task OnMainAdmDivChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var selectedAdId))
        {
            SelectedMainDivisionId = selectedAdId;
            childrenAdministrativeDivisions = await AdministrativeDivisionCustomService
                .GetChildrenAsync(selectedAdId, administrativeDivisions.ToList());

            await ValueChanged.InvokeAsync(selectedAdId);
            await OnMainDivisionChanged.InvokeAsync(selectedAdId);
        }
    }
    private async Task onChildAdmDivChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var selectedAdmDivId))
        {
            SelectedChildDivisionId = selectedAdmDivId;
            Value = selectedAdmDivId; // ✅ keep in sync locally

            await ValueChanged.InvokeAsync(selectedAdmDivId);
            await OnChildDivisionChanged.InvokeAsync(selectedAdmDivId);
        }
    }
}




<!-- Child Administrative Division -->
<!--
<div class="col">
    <div class="mb-3">
@if (childrenAdministrativeDivisions?.Any() == true)
{
                        <label class="form-label">الوحدات الإدارية</label>
                        <InputSelect TValue="int"
                                     class="form-control" @bind-Value="Value" @onchange="onChildAdmDivChange">

                            @foreach (var mad in childrenAdministrativeDivisions)
                            {
                                            <option value="@mad.AdministrativeDivisionId">
                                                @countryStructures.First(cs => cs.CountryStructureId == mad.CountryStructureId).Name: @mad.Name
                                            </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="ValueExpression" />
}
else
{

}
    </div>
</div>-->
