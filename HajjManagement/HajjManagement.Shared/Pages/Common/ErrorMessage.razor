@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="modal fade" id="unauthorizedModal" tabindex="-1" aria-labelledby="unauthorizedModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        @* <div class="modal-content text-center"> *@
            <div class="modal-content">
            <div class=@(IsError==true? "modal-header border-1 bg-danger" : "modal-header border-1 bg-success")>
                <h5 class="modal-title text-white text-center" id="unauthorizedModalLabel"><span class="text-center">@Header</span></h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body border-1">
                <p>@Message</p>
                <p>@Details</p>
            </div>
            <div class="modal-footer border-1 justify-content-center">
                <button type="button" class="btn btn-primary" @onclick='() => OnModalButtonClicked.InvokeAsync()'>@($"{ModalButtonCaption}")</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsError { get; set; } = true;
    [Parameter] public string Header { get; set; } = string.Empty;
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public string Details { get; set; } = string.Empty;
    [Parameter] public string ModalButtonCaption { get; set; } = string.Empty;
    [Parameter] public EventCallback OnModalButtonClicked { get; set; }
    private IJSRuntime JSRuntime => JS;

    public async Task ShowAsync()
    {
        await JSRuntime.InvokeVoidAsync("showModal", "#unauthorizedModal");
    }

    public async Task HideAsync()
    {
        await JSRuntime.InvokeVoidAsync("hideModal", "#unauthorizedModal");
    }
}
