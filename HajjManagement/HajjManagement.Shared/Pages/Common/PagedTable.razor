@typeparam TItem

<div dir="@Direction">
    <div class="card">

        <table class="table table-striped">
            <thead>
                <tr>
                    @foreach (var column in Columns.Where(c=>c.isHidden==false))
                    {
                        <th @onclick="() => Sort(column.Property)" style="cursor:pointer">
                            @column.Title
                            @(CurrentSortColumn == column.Property ? (SortAscending ? " ↑" : " ↓") : "")
                        </th>
                    }
                    <th>@(IsArabic ? "الإجراءات" : "Actions")</th>
                </tr>
                <tr>
                    @foreach (var column in Columns.Where(c => c.isHidden == false))
                    {
                        <th>
                            <input class="form-control" type="text"
                                   @bind="column.SearchValue"
                                   @bind:event="oninput" />
                        </th>
                    }
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (PagedItems.Any())
                {

                    @foreach (var item in PagedItems)
                    {

                        <tr>
                            @foreach (var column in Columns.Where(c => c.isHidden == false))
                            {
                                @* <td>@column.CellTemplate(item)</td> *@
                                <td>@column.RenderCell(item)</td>

                            }
                            <td>
                                <button class="btn btn-sm btn-info me-2" @onclick="() => OnView.InvokeAsync(item)">👁</button>
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => OnEdit.InvokeAsync(item)">✏</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td class="text-danger text-center" colspan="@(Columns.Count + 1)">لا توجد بيانات</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="row w-100 justify-content-between">
            <div class="col-auto text-start">
                <nav>
                    <ul class="pagination">
                        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)">
                                @(IsArabic ? "السابق" : "Previous")
                            </button>
                        </li>
                        @for (int tablePage = 1; tablePage <= TotalPages; tablePage++)
                        {
                            var indexPage = tablePage;
                            <li class="page-item @(CurrentPage == indexPage ? "active" : "")">
                                <button class="page-link" @onclick="() => GoToPage(indexPage)">
                                    @indexPage
                                </button>
                            </li>
                        }
                        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)">
                                @(IsArabic ? "التالي" : "Next")
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
            <div class="col-auto text-end">
                <div class="mb-3 d-flex align-items-center">
                    <label for="pageSizeSelector" class="me-2">@(IsArabic ? "عدد العناصر:" : "Items per page:")</label>
                    <select id="pageSizeSelector" class="form-select w-auto" @onchange="OnPageSizeChanged">
                        @foreach (var size in PageSizeOptions)
                        {
                            <option value="@size" selected="@(size == PageSize)">
                                @size
                            </option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public List<ColumnDefinition<TItem>> Columns { get; set; } = new();
    [Parameter] public EventCallback<TItem> OnView { get; set; }
    [Parameter] public EventCallback<TItem> OnEdit { get; set; }
    [Parameter] public string Language { get; set; } = "En";

    bool IsArabic => Language == "Ar";
    string Direction => IsArabic ? "rtl" : "ltr";

    int CurrentPage = 1;
    int PageSize = 10;
    int[] PageSizeOptions = new[] { 5, 10, 20, 50 };
    string? CurrentSortColumn;
    bool SortAscending = true;

    IEnumerable<TItem> FilteredItems => Items.Where(item =>
        Columns.All(c =>
            string.IsNullOrEmpty(c.SearchValue) ||
            (c.GetValue(item)?.ToString()?.Contains(c.SearchValue, StringComparison.OrdinalIgnoreCase) ?? false)
        )
    );

    IEnumerable<TItem> SortedItems =>
        string.IsNullOrEmpty(CurrentSortColumn)
            ? FilteredItems
            : (SortAscending
                ? FilteredItems.OrderBy(i => Columns.First(c => c.Property == CurrentSortColumn).GetValue(i))
                : FilteredItems.OrderByDescending(i => Columns.First(c => c.Property == CurrentSortColumn).GetValue(i)));

    IEnumerable<TItem> PagedItems => SortedItems.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    int TotalPages => (int)Math.Ceiling(SortedItems.Count() / (double)PageSize);

    void Sort(string property)
    {
        if (CurrentSortColumn == property)
            SortAscending = !SortAscending;
        else
        {
            CurrentSortColumn = property;
            SortAscending = true;
        }
    }

    void GoToPage(int page)
    {
        if (page < 1 || page > TotalPages) return;
        CurrentPage = page;
    }

    void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize))
        {
            PageSize = newSize;
            CurrentPage = 1;
        }
    }


    public class ColumnDefinition<T>
    {
        public string Title { get; set; } = "";
        public string Property { get; set; } = "";
        public string? SearchValue { get; set; }
        public bool? isHidden { get; set; } = false;
        public Func<T, object?> GetValue { get; set; } = _ => null!;
        public Func<T, RenderFragment>? CellTemplate { get; set; }

        // public RenderFragment RenderCell(T item) =>
        //     CellTemplate != null ? CellTemplate(item) : builder => builder.AddContent(0, GetValue(item));

        public RenderFragment RenderCell(T item) => builder =>
        {
            var value = GetValue(item);
            var valueStr = value?.ToString() ?? string.Empty;


            // --------------------------
            // PATTERN 1: Local image (pictureURL_)
            // --------------------------

            // --------------------------
            // PATTERN 2: Remote image (imageURL_)
            // --------------------------

            // --------------------------
            // PATTERN 3: Hyperlink (URL_)
            // New Rule: last part is property name containing ID
            // Example: URL_User_Details_Id => <a href="/user/details/{item.Id}">{value}</a>
            // --------------------------



            // --------------------------
            // PATTERN 1: Local image (pictureURL_)
            // --------------------------

            if (Property.StartsWith("pictureURL_", StringComparison.OrdinalIgnoreCase))
            {
                var parts = Property.Split('_', StringSplitOptions.RemoveEmptyEntries);

                string imagePath = "images";
                string width = "50";
                string height = "50";
                string defaultImage = "default.png";

                if (parts.Length > 3)
                {
                    bool hasCustomDefault = parts.Length >= 5 && parts[^1].Contains('.');
                    if (hasCustomDefault)
                    {
                        defaultImage = parts[^1];
                        height = parts[^2];
                        width = parts[^3];
                        imagePath = string.Join('/', parts.Skip(1).Take(parts.Length - 4));
                    }
                    else
                    {
                        height = parts[^1];
                        width = parts[^2];
                        imagePath = string.Join('/', parts.Skip(1).Take(parts.Length - 3));
                    }
                }

                var src = $"_content/HajjManagement.Shared/{imagePath}/{(string.IsNullOrEmpty(valueStr) ? defaultImage : valueStr)}";

                builder.OpenElement(0, "img");
                builder.AddAttribute(1, "src", src);
                builder.AddAttribute(2, "width", width);
                builder.AddAttribute(3, "height", height);
                builder.AddAttribute(4, "alt", "Image");
                builder.CloseElement();
            }

            // --------------------------
            // PATTERN 2: Remote image (imageURL_)
            // --------------------------

            else if (Property.StartsWith("imageURL_", StringComparison.OrdinalIgnoreCase))
            {
                var parts = Property.Split('_', StringSplitOptions.RemoveEmptyEntries);

                string width = "50";
                string height = "50";

                if (parts.Length >= 3)
                {
                    width = parts[1];
                    height = parts[2];
                }

                var src = string.IsNullOrEmpty(valueStr)
                ? "https://via.placeholder.com/50x50?text=No+Image"
                : valueStr;

                builder.OpenElement(0, "img");
                builder.AddAttribute(1, "src", src);
                builder.AddAttribute(2, "width", width);
                builder.AddAttribute(3, "height", height);
                builder.AddAttribute(4, "alt", "Image");
                builder.CloseElement();
            }

            // --------------------------
            // PATTERN 3: Hyperlink (URL_)
            // New Rule: last part is property name containing ID
            // Example: URL_User_Details_Id => <a href="/user/details/{item.Id}">{value}</a>
            // --------------------------
            else if (Property.StartsWith("URL_", StringComparison.OrdinalIgnoreCase))
            {
                dynamic val = value; // val.Id, val.Name
                var href = $"/{val.URL}/{val.Id}";

                builder.OpenElement(0, "a");
                builder.AddAttribute(1, "href", href);
                builder.AddContent(2, val.Name);
                builder.CloseElement();

             }

             // --------------------------
             // DEFAULT: Normal text or custom template
             // --------------------------
             else if (CellTemplate != null)
             {
                 builder.AddContent(5, CellTemplate(item));
             }
             else
             {
                 builder.AddContent(6, valueStr);
             }
         };



    }




}


