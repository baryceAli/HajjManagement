@page "/Contract/List"
@using HajjManagement.Shared.Pages.Common
@using HajjManagement.Shared.Services
@using CoreBusiness
@inject IGenericAPIService<Contract> ContractService
@inject IGenericAPIService<Hotel> HotelService

@inject NavigationManager NavigationManager

<div class="card shadow" dir="rtl">
    <div class="card-header">
        <h3 class="mb-4">العقود</h3>
    </div>
    <div class="card-body">
        <button class="btn btn-primary mb-3" @onclick="CreateNew"><i class="bi bi-file-earmark-plus-fill"></i> إضافة جديد</button>
        
        @if (contractList == null)
        {
            <p>جاري التحميل...</p>
        }

        else
        {
            <PagedTable TItem="Contract"
                        Items="contractList"
                        Language="@language"
                        Columns="@ContractColumns"
                        OnView="ViewContract"
                        OnEdit="EditContract" />
        }

    </div>
</div>


@code {
    // Add property to hold the list of AdministrativeDivisionTypes
    private List<Contract> contractList ;
    private IEnumerable<Contract> allContractList ;
    private IEnumerable<Hotel> Hotels ;

    // private Hotel selectedHotel = new();
    private int selectedHotelId = 0;
    [Inject] IJSRuntime JS { get; set; }
    private string language = "Ar";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Hotels = (await HotelService.GetAllAsync()).ToList();
            // selectedHotelId= Hotels;

            allContractList = await ContractService.GetAllAsync();
            contractList = allContractList
                .Where(ad => ad.HotelId== selectedHotelId)
                .ToList();
            contractList = new List<Contract>(allContractList);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching data: {ex.Message}");
            contractList = new List<Contract>();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeTomSelect", "#country-select");


        }
    }

    private void CreateNew()
    {
        NavigationManager.NavigateTo("/Contract/Form");
    }

    private void ViewDetails(int id)
    {
        NavigationManager.NavigateTo($"/Contract/Details/{id}");
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/Contract/Form/{id}");
    }

    private async Task onHotelChanged(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value?.ToString(), out int hotelId))
        {

            selectedHotelId = hotelId;

            contractList = allContractList
                .Where(ad => ad.HotelId == selectedHotelId)
                .ToList();
        }
    }

    /// <summary>
    /// PageTable Parameters for Guests
    /// </summary>
    /// <returns></returns>
    ///
    bool IsArabic => language == "Ar";

    private List<PagedTable<Contract>.ColumnDefinition<Contract>> ContractColumns => GetAdministrativeDivisionColumns();
    private List<PagedTable<Contract>.ColumnDefinition<Contract>> GetAdministrativeDivisionColumns()
    {
        return new()
        {
            new() { Title = IsArabic ? "#" : "#", Property = "ContractId", GetValue = c => c.ContractId},
            new() { Title = IsArabic ? "رقم العقد" : "Contract No", Property = "ContractNo", GetValue = c => c.ContractNo },
            new() { Title = IsArabic ? "الفندق" : "Hotel", Property = "HotelId", GetValue = c =>
                                                                                       Hotels.First(h=>h.HotelId == c.HotelId).Name},
            new() { Title = IsArabic ? "عدد الأسرة" : "Beds No", Property = "Beds", GetValue = c => c.Beds},
            new() { Title = IsArabic ? "عدد الأسرة المستخدمة" : "Consumed Beds No", Property = "UsedBeds", GetValue = c => c.UsedBeds},
            new() { Title = IsArabic ? "عدد الأسرة المتبقية" : "Remaining Beds No", Property = "RemainingBeds", GetValue = c => (c.Beds - c.UsedBeds)},
        };
    }
    // These methods must exist to handle OnView and OnEdit events
    private Task ViewContract(Contract contract)
    {
        NavigationManager.NavigateTo($"/Contract/Details/{contract.ContractId}");
        return Task.CompletedTask;
    }

    private Task EditContract(Contract contract)
    {
        NavigationManager.NavigateTo($"/Contract/Form/{contract.ContractId}");
        return Task.CompletedTask;
    }

    /// <summary>
    /// End of PageTable Parameters for Guests
    /// </summary>
    /// <returns></returns>

}
