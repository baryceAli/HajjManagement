@page "/User/Form"
@page "/User/Form/{Id:int?}"
@layout LoginLayout
@using CoreBusiness
@using CoreBusiness.Dtos
@using CoreBusiness.Utils
@using HajjManagement.Shared.Pages
@using HajjManagement.Shared.Layout
@using HajjManagement.Shared.Services
@using HajjManagement.Shared.Services.Custom
@using Microsoft.AspNetCore.Components.Authorization
@inject IGenericAPIService<User> UserService
@inject IGenericAPIService<Country> CountryService
@inject IGenericAPIService<AdministrativeDivision> AdministrativeDivisionService
@inject IGenericAPIService<CountryStructure> CountryStructureService
@inject IAdministrativeDivisionCustomService AdministrativeDivisionCustomService
@inject IUserCustomService UserCustomService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

        <div class="card show" dir="rtl">
            <div class="card-header">
                <div class="row d-flex justify-content-between">
                    <div class="col-10">

                        <h3>@title</h3>
                    </div>

                    <div class="col-2 text-center">
                        <label for="profileUpload" style="cursor:pointer;">
                            <img src=' @(string.IsNullOrEmpty(user.ProfilePictureUrl) ? "_content/HajjManagement.Shared/images/user/profile/default.png" : user.ProfilePictureUrl)'
                                 alt="Profile image"
                                 width="50"
                                 class="rounded-circle border" />
                        </label>
                        <div>
                            <a href="javascript:void(0)" @onclick="TriggerFileUpload">Change</a>
                        </div>
                        <input type="file" id="profileUpload" @ref="fileInput" style="display:none"
                               @onchange="OnProfileSelected" accept="image/*" />
                    </div>

                </div>
            </div>
            <div>



                <EditForm Model="user" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                    @if (Id.HasValue && Id > 0)
                    {

                    }

                    @* @bind-Value="user.AdministrativeDivisionId" *@
                    <CascadingDivisionSelect Value="@user.AdministrativeDivisionId"
                                             ValueChanged="OnAdminstrativeDivisionChange"
                                             Disabled="@isDisabled" />


                    <div class="row mt-3 mx-2">
                        <div class="col">
                            <div class="mb-3">
                                <label for="Name" class="form-label">الاسم الأول</label>
                                <InputText id="Name" class="form-control" @bind-Value="user.FirstName" />
                            </div>
                        </div>

                        <div class="col">
                            <div class="mb-3">
                                <label for="Name" class="form-label">الاسم الإخير</label>
                                <InputText id="Name" class="form-control" @bind-Value="user.LastName" />
                            </div>
                        </div>

                        <div class="col">
                            <div class="mb-3">
                                <label for="Name" class="form-label">رقم الهاتف</label>
                                <InputText id="Name" class="form-control" @bind-Value="user.PhoneNumber" />
                            </div>
                        </div>

                        <div class="col">
                            <div class="mb-3">
                                <label for="Name" class="form-label">الإيميل</label>
                                <InputText id="Name" disabled="@(Id > 0)" class="form-control" @bind-Value="user.Email" />
                            </div>
                        </div>
                    </div>

                    <div class="row  mt-3 mx-2">
                        <div class="col">
                            <div class="mb-3">
                                <label for="Name" class="form-label">رقم الجواز</label>
                                <InputText id="Name" class="form-control" @bind-Value="user.Passport" />
                            </div>
                        </div>

                        <div class="col">
                            <div class="mb-3">
                                <label for="Name" class="form-label">مكان الإصدار</label>
                                <InputText id="Name" class="form-control" @bind-Value="user.IssuePlace" />
                            </div>
                        </div>

                        <div class="col">
                            <div class="mb-3">
                                <label for="Name" class="form-label">تاريخ الإصدار</label>
                                <InputDate id="Name" class="form-control" @bind-Value="user.IssueDate" />
                            </div>
                        </div>


                        <div class="col">
                            <div class="mb-3">
                                <label for="Name" class="form-label">تاريخ الانتهاء</label>
                                <InputDate id="Name" class="form-control" @bind-Value="user.ExpiryDate" />
                            </div>
                        </div>
                    </div>

                    <div class="row mt-3 mx-2">
                        <div class="mb-3">
                            <label for="Name" class="form-label">العنوان</label>
                            <InputTextArea id="Name" class="form-control" @bind-Value="user.Address" />
                        </div>
                    </div>

                    <div class="mt-3 mx-2">
                        <ValidationSummary></ValidationSummary>
                    </div>
                    <div class="mt-3 mx-2 mb-2">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading"><i class="bi bi-floppy2-fill m-1"></i> @(Id.HasValue && Id.Value > 0 ? "تعديل" : "حفظ")</button>
                        <button type="button" class="btn btn-dark" disabled="@isLoading" @onclick="onCancel"><i class="bi bi-stop-circle-fill"></i> إلغاء</button>
                    </div>


                </EditForm>
            </div>

        </div>

        <ErrorMessage @ref="errorMessage"
                      Header="@ModalHeader"
                      Message="@ModalMessage"
                      ModalButtonCaption="@ModalButtonCaption"
                      Details="@ModalDetails"
                      IsError="@isError"
                      OnModalButtonClicked="OnModalButtonClicked" />


@code {
    private ErrorMessage errorMessage;
    private string ModalButtonCaption = string.Empty;
    private string ModalHeader = string.Empty;
    private string ModalMessage = string.Empty;
    private string ModalDetails = string.Empty;

    private bool isError = false;
    private int SelectedDivisionId;
    private bool isDisabled = false;
    [Parameter]
    public int? Id { get; set; }
    private string title = "تسجيل مستخدم جديد";
    // private User? userDB = new();
    private UserDto? user = new();
    private bool isLoading= false;

    private Type layoutType = typeof(LoginLayout);
    private ElementReference? fileInput;
    [Inject] IJSRuntime JS { get; set; } = default!;
    private async Task TriggerFileUpload()
    {
        await JS.InvokeVoidAsync("triggerClick", fileInput);
    }
    protected override async Task OnInitializedAsync()
    {


        user.CountryId = GlobalData.CurrentCountryId;

        if (Id > 0)
        {
            title = "تعديل بيانات مستخدم";
            var userDB = await UserService.GetByIdAsync((int)Id);
            user = UserCustomService.GetUserDto(userDB);
            if (user.CountryId == 0)
            {
                user.CountryId = GlobalData.CurrentCountryId;
            }
        }
    }
    private async Task HandleValidSubmit()
    {
        // if()
        try
        {
            isLoading = true;
            ModalHeader = "Add new user";

            var adm = await AdministrativeDivisionService.GetByIdAsync(user.AdministrativeDivisionId);
            user.CountryId = adm?.CountryId ?? 0;
            var userDb = UserCustomService.GetUser(user);

            ApiResponseMessage responseMessage = await UserService.GenericEndPointAsync<ApiResponseMessage>(userDb, "V1","user", "register",HttpMethod.Post);
            // ModalMessage = $"تم اضافة حسابك بنجاح {resUser.FirstName} {resUser.LastName}";
            // ModalDetails = $"تم ارسال رسال في ايميلك {resUser.Email}. قم بالنقر على زر تأكيد الايميل حتى تكتمل عملية التسجيل";
            if (responseMessage.IsSuccess)
            {
                ModalButtonCaption = "Ok";
                isError = false;
                ModalHeader = "Register new user";
                ModalMessage = "New user registered successfully";
                ModalDetails = $"Confirmation link has been sent to email {userDb.Email} ";


                await errorMessage.ShowAsync();

            }
            else
            {
                isError = true;
                ModalButtonCaption = "Ok";
                ModalHeader = "Register new user";
                ModalMessage = responseMessage.FriendlyMessage;
                ModalDetails = $"{responseMessage.SytemMessage}";
                await errorMessage.ShowAsync();
            }
            isLoading = false;
        }
        catch (Exception ex)
        {

            isError = true;
            if (isError)
            {
                ModalButtonCaption = "موافق";
                ModalHeader = "Add new user";
                ModalMessage = ex.Message;
                ModalDetails = string.Empty;// ex.ToString();
                await errorMessage.ShowAsync();
            }
            isLoading = false;
        }
    }
    private async Task OnModalButtonClicked()
    {

        var AuthState = await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var isAdmin= GlobalData.IsAdmin(AuthState);
        if ( !isAdmin)
        {
            if(!isError)
                NavigationManager.NavigateTo("/");
            await errorMessage.HideAsync();
            return;
        }
        if(!isError)
            NavigationManager.NavigateTo($"/User/Roles/{user.Email}");
        await errorMessage.HideAsync();
    }

    private void onCancel()
    {
        NavigationManager.NavigateTo("/User/List");
    }

    private async Task OnCountryChange(int e)
    {
        user.CountryId = e;

    }
    private void OnAdminstrativeDivisionChange(int e)
    {
        user.AdministrativeDivisionId = e;
        StateHasChanged();
    }
    private async Task OnProfileSelected(ChangeEventArgs e)
    {
        var file = (e.Value as Microsoft.AspNetCore.Components.Forms.IBrowserFile);
        if (file != null)
        {
            // Example: read image as data URL (for preview)
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer);
            var base64 = Convert.ToBase64String(buffer);
            user.ProfilePictureUrl = $"data:{file.ContentType};base64,{base64}";

            // TODO: Optionally upload to server
        }
    }
}
